@using ChessBoardGui.Models;
@using ChessBoardGui.Data;
@inject Chessrules rules;

<div class="d-flex flex-row align-items-center flex-grow-0 piece">
    @foreach (var piece in CapturedPieces)
    {
        <div class="p-2 piece">
            <Piece Model="piece" />
        </div>
    }
</div>


<CascadingValue Value="this">
    @ChildContent
</CascadingValue>



@code {
    [Parameter] public Stack<PieceModel> CapturedPieces { get; set; }
    [Parameter] public List<PieceModel> Pieces { get; set; }
    [Parameter] public List<SquareModel> Squares { get; set; }
    [Parameter] public EventCallback<Move> OnStatusUpdated { get; set; }
    [Parameter] public EventCallback<PieceModel> OnRefresh { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    public string Payload { get; set; }

    public async Task VisualizeLegalMoves(PieceModel piece)
    {
        var legalMoves = rules.GetLegalMoves(piece, Pieces, false);
        var legalSquares = Squares.Where(s => legalMoves.Contains(s.Position));
        if (legalSquares?.Any() ?? false)
        {
            foreach(var square in legalSquares)
            {
                square.IsLegalSquare = true;
            }
        }
        var illegalSquares = Squares.Where(s => !legalMoves.Contains(s.Position));
        foreach (var square in illegalSquares)
        {
            square.IsLegalSquare = false;
        }

        await OnRefresh.InvokeAsync();
    }

    public void RemovePiece(PieceModel piece)
    {
        if (Pieces.FirstOrDefault(p => p.Id== piece.Id) is PieceModel capturedPiece)
        {
            CapturedPieces.Push(capturedPiece);
            Pieces.Remove(capturedPiece);
            StateHasChanged();
        }
    }

    public async Task UpdatePieceAsync((int x, int y) newPos)
    {

        //capture piece
        PieceModel? _capturedPiece = null;
        if (Pieces.FirstOrDefault(p => p.Position == newPos) is PieceModel capturedPiece)
        {
            _capturedPiece = capturedPiece;
            CapturedPieces.Push(capturedPiece);
            Pieces.Remove(capturedPiece);
        }
        var piece = Pieces.FirstOrDefault(p => p.Id == Payload);
        if(piece != null)
        {
            piece.Position = newPos;
            var move = new Move(rules, piece, _capturedPiece);
            await OnStatusUpdated.InvokeAsync(move);
        }
       
    }

    public PieceModel GetCurrentPayload()
    {
        return this.Pieces.First(p => p.Id == Payload);
    }
}
