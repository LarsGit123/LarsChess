@using ChessBoardGui.Models;
@using ChessBoardGui.Data;
@inject Chessrules rules;

    <div class="square @squareType dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave"
        @onclick="HandleClick">
    
        @foreach (var piece in pieces)
        {
            <Piece Model="piece" />
        }
    </div>

@code {

    [CascadingParameter] PiecesContainer Container { get; set; }
    [Parameter] public SquareModel Model { get; set; }
    List<PieceModel> pieces = new List<PieceModel>();
    string dropClass = "";
    string squareType = "";

    protected override void OnParametersSet()
    {
        if (Model.IsLegalSquare)
        {
            squareType = "square-orange";
        }
        else if((Model.Position.x + Model.Position.y) % 2 == 0)
        {
            squareType = "square-black";
        }
        else
        {
            squareType = "square-white";
        }
        pieces.Clear();
        pieces.AddRange(Container.Pieces.Where(p => p.Position == Model.Position));
    }

    private void HandleDragEnter()
    {
        if (Model.Position == Container.GetCurrentPayload().Position) return;

        if (Container.Pieces.Any(p => p.Position == Model.Position))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private async Task HandleClick()
    {
        if(Model.IsLegalSquare && Container.GetCurrentPayload().Position != Model.Position)
        {
            await HandleDrop();
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        var currentPiece = Container.GetCurrentPayload();
        var legalMoves = rules.GetLegalMoves(currentPiece, Container.Pieces, false);
        var legalDropSquare = legalMoves.Any(r => r == Model.Position);
        if (!legalDropSquare)
        {
            dropClass = "no-drop";
        }
        else
        {
            if (Container.Pieces.FirstOrDefault(p => p.Position == Model.Position) is PieceModel deletePiece)
            {          
                //Container.RemovePiece(deletePiece);
            }




            if (currentPiece.PieceClass == PieceClass.King )
            {
                if((currentPiece.Position.x - Model.Position.x) > 1)
                {
                    //castle left
                    var rook = Container.Pieces.First(piece => piece.Position.x == Model.Position.x - 2 && piece.Position.y == Model.Position.y);
                    var kingId = Container.Payload;
                    Container.Payload = rook.Id;
                    await Container.UpdatePieceAsync((Model.Position.x + 1, Model.Position.y));
                    Container.Payload = kingId;
                }
                if ((currentPiece.Position.x - Model.Position.x) < -1)
                {
                    //castle right
                    var rook = Container.Pieces.First(piece => piece.Position.x == Model.Position.x + 1 && piece.Position.y == Model.Position.y);
                    var kingId = Container.Payload;
                    Container.Payload = rook.Id;
                    await Container.UpdatePieceAsync((Model.Position.x - 1, Model.Position.y));
                    Container.Payload = kingId;
                }
            }
            //execute piece move
            await Container.UpdatePieceAsync(Model.Position);
            



            pieces.Clear();
            pieces.AddRange(Container.Pieces.Where(p => p.Position == Model.Position));
            await Container.OnRefresh.InvokeAsync();
        }
    }
    
}
