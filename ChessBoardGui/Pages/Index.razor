@page "/"
@using ChessBoardGui.Data;
@using ChessBoardGui.Models;
@inject Chessrules rules;
@inject MoveExecuter moveExecuter;

<PageTitle>Sjakk</PageTitle>
 
<PiecesContainer CapturedPieces="CapturedPieces" Pieces = "Pieces" Squares="Squares" OnStatusUpdated="HandlePieceMoved" OnRefresh="Refresh" >

    @if (rules.Xcoords != null)
    {
        <div class="boardrow">

            @foreach (var x in rules.Xcoords)
            {
                <div class="square" style="height:1.5rem;">
                    <p>@x</p>
                </div>
            }
        </div>
    }

    <BoardRow RowNum="0">
        @foreach (var model in Squares.Where(b => b.Position.y == 0))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="1">
        @foreach (var model in Squares.Where(b => b.Position.y == 1))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="2">
        @foreach (var model in Squares.Where(b => b.Position.y == 2))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="3">
        @foreach (var model in Squares.Where(b => b.Position.y == 3))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="4">
        @foreach (var model in Squares.Where(b => b.Position.y == 4))
            {
                <Square Model="@model" />
            }
        </BoardRow>

    <BoardRow RowNum="5">
        @foreach (var model in Squares.Where(b => b.Position.y == 5))
        {
            <Square Model="@model" />
        }
    </BoardRow>


    <BoardRow RowNum="6">
        @foreach (var model in Squares.Where(b => b.Position.y == 6))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="7">
        @foreach (var model in Squares.Where(b => b.Position.y == 7))
            {
                <Square Model="@model" />
            }
        </BoardRow>
</PiecesContainer>

<div class="flex-row">
    @for (int i = 0; i < moveExecuter.Moves.Count(); i++)
    {
        if (i == moveExecuter.BoardPositionIndex - 1)
        {
            <strong>@moveExecuter.Moves.ElementAt(i).GetPgn(i)</strong>
        }
        else
        {
            @moveExecuter.Moves.ElementAt(i).GetPgn(i)
        }

    }
</div>
<div>
    <button @onclick="MoveGoBack">@("<-")</button>
    <button @onclick="MoveGoForvard">@("->")</button>
</div>






@code{

    //  List<(int x, int y)> BoardPositions = new List<(int x, int y)>();

    List<SquareModel> Squares = new List<SquareModel>();
    List<PieceModel> Pieces = new List<PieceModel>();
    Stack<PieceModel> CapturedPieces = new Stack<PieceModel>();
    string lastUpdatedJob = "";

    private void Refresh()
    {
        StateHasChanged();        
    }

    protected override void OnInitialized()
    {
        for(int y=0; y<8; y++)
        {
            for(int x = 0; x<8; x++)
            {
                var pos = (x, y);

                if(rules.StartingPositions.TryGetValue(pos, out var type))
                {
                    Pieces.Add(new PieceModel((pos.x, pos.y), Guid.NewGuid().ToString(), type.Item1, type.Item2));
                }
                Squares.Add(new SquareModel((x, y)));
            }
        }
    }

    void HandlePieceMoved(Move move) 
    {
        if(move is null)
        {
            return;
        }
        moveExecuter.UpdateMovesState(move);
        StateHasChanged();
    }

    private void MoveGoBack()
    {
        moveExecuter.RevertMove(Pieces, CapturedPieces);
    }
    private void MoveGoForvard()
    {
        moveExecuter.UndoRevertMove(Pieces);
        

    }
}