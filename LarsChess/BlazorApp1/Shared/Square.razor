@using BlazorApp1.Data;
@using BlazorApp1.Models;
@inject Chessrules rules;

    <div class="square @squareType dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">
    
        @foreach (var piece in pieces)
        {
            <Piece Model="piece" />
        }
    </div>

@code {

    [CascadingParameter] PiecesContainer Container { get; set; }
    [Parameter] public SquareModel Model { get; set; }
    List<PieceModel> pieces = new List<PieceModel>();
    string dropClass = "";
    string squareType = "";

    protected override void OnParametersSet()
    {
        if (Model.IsLegalSquare)
        {
            squareType = "square-orange";
        }
        else if((Model.Position.x + Model.Position.y) % 2 == 0)
        {
            squareType = "square-black";
        }
        else
        {
            squareType = "square-white";
        }
        pieces.Clear();
        pieces.AddRange(Container.Pieces.Where(p => p.Position == Model.Position));
    }

    private void HandleDragEnter()
    {
        if (Model.Position == Container.Payload.Position) return;

        if (Container.Pieces.Any(p => p.Position == Model.Position))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {

        dropClass = "";
        var legalMoves = rules.GetLegalMoves(Container.Payload, Container.Pieces, false);
        var legalDropSquare = legalMoves.Any(r => r == Model.Position);
        if (!legalDropSquare)
        {
            dropClass = "no-drop";
        }
        else
        {
            await Container.UpdatePieceAsync(Model.Position);
            pieces = new List<PieceModel>();
            StateHasChanged();
            pieces.AddRange(Container.Pieces.Where(p => p.Position == Model.Position));

        }
    }
}
