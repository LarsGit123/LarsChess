@using BlazorApp1.Data;
@using BlazorApp1.Models;


    <div class="square @squareType dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">
    
        @foreach (var piece in pieces)
        {
            <Piece Model="piece" />
        }
    </div>

@code {

    [CascadingParameter] PiecesContainer Container { get; set; }
    [Parameter] public (int x, int y) Position { get; set; }
    [Parameter] public JobStatuses[] AllowedStatuses { get; set; }
    List<PieceModel> pieces = new List<PieceModel>();
    string dropClass = "";
    string squareType = "";

    protected override void OnParametersSet()
    {
        if((Position.x + Position.y) % 2 == 0)
        {
            squareType = "square-black";
        }
        else
        {
            squareType = "square-white";
        }
        pieces.Clear();
        pieces.AddRange(Container.Pieces.Where(p => p.Position == Position));
    }

    private void HandleDragEnter()
    {
        if (Position == Container.Payload.Position) return;

        if (Container.Pieces.Any(p => p.Position == Position))
        {
            var piece = Container.Pieces.First(p => p.Position == Position);

            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {

        dropClass = "";

        var legalDropSquare = Chessrules.GetLegalMoves(Container.Payload).Any(r => r == Position);
        if (!legalDropSquare)
        {
            
        }
        if (Container.Pieces.Any(p => p.Position == Position)) return;

        await Container.UpdatePieceAsync(Position);
    }
}
