@using BlazorApp1.Models;


    <div class="square @squareType dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach(var piece in pieces)
        {
            <Piece Model="piece" />
        }
        
    </div>

@code {

    [CascadingParameter] PiecesContainer Container { get; set; }
    [Parameter] public int[] Position { get; set; }
    [Parameter] public JobStatuses[] AllowedStatuses { get; set; }
    List<PieceModel> pieces = new List<PieceModel>();
    string dropClass = "";
    string squareType = "";

    protected override void OnParametersSet()
    {
        if((Position[0] + Position[1]) % 2 == 0)
        {
            squareType = "square-black";
        }
        else
        {
            squareType = "square-white";
        }
        pieces.Clear();
        pieces.AddRange(Container.Pieces.Where(p => p.Position[0] == Position[0] && p.Position[1] == Position[1]));
    }

    private void HandleDragEnter()
    {
        if (Position[0] == Container.Payload.Position[0] && Position[1] == Container.Payload.Position[1]) return;

        if (Container.Pieces.Any(p => p.Position[0] == Position[0] && p.Position[1] == Position[1]))
        {
            var piece = Container.Pieces.First(p => p.Position[0] == Position[0] && p.Position[1] == Position[1]);

            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        if (Container.Pieces.Any(p => p.Position[0] == Position[0] && p.Position[1] == Position[1])) return;

        await Container.UpdatePieceAsync(Position);
    }
}
