@using BlazorApp1.Models;

<div class="square @colourClass @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
@ondrop="HandleDrop"
@ondragenter="HandleDragEnter"
@ondragleave="HandleDragLeave">
@if(Position != null)
{
    <strong>
        @Position[0].ToString();
        @Position[1].ToString();
        </strong>
        if (showPiece && Container?.Pieces?.FirstOrDefault(p => p.Position[0] == this.Position[0] && p.Position[1] == this.Position[1]) is PieceModel model)
        {
            <Piece Model="model" RefreshPreviousPosition="SetModel" />
        }
    }
</div>

@code {
    [CascadingParameter] PiecesContainer Container { get; set; }
    string colourClass = "";
    string dropClass = "";
    bool showPiece = true;
    [Parameter] public int[] Position { get; set; }
    //PieceModel? model;

    protected override void OnInitialized()
    { 
        Math.DivRem(Position[0] + Position[1], 2, out var rem);
        colourClass = (rem == 0)
        ? "square-black"
        : "square-white";
        SetModel();
    }

    protected override void OnParametersSet()
    {
        SetModel();
    }

    public void SetModel()
    {        
        var piece = Container?.Pieces?.FirstOrDefault(p => p.Position[0] == this.Position[0] && p.Position[1] == this.Position[1]);
        StateHasChanged();
    }

    private void HandleDragEnter()
    {
        if (Container.Payload.Position[0] == this.Position[0] && Container.Payload.Position[1] == this.Position[1]) return;

        if (Container.Pieces.Any(p => p.Position[0] == this.Position[0] && p.Position[1] == this.Position[1]))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        if(this.Position[0] == Container.Payload.Position[0] && this.Position[1] == Container.Payload.Position[1])
        {
            showPiece = false;
        }
        SetModel();
    }

    private async Task HandleDrop()
    {
        if(dropClass == "can-drop"){                        
            await Container.UpdatePieceAsync(this.Position);
            
        }
        else
        {
            await Container.UpdatePieceAsync(Container.Payload.Position);
        }    
    }
}
