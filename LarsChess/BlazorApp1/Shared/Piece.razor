@using BlazorApp1.Models;

<div class="draggable-piece piece" draggable="true" @ondragstart="@(() => HandleDragStart(Model))" @onclick="HandleClick" @ondragend="HandleDragEnd">
    @if(Model != null)
    {
        <div style="background-color:@testcolor;">
            <i class="@fontawesomeClass(Model.PieceClass) @colourClass(Model.Colour)"></i>
        </div>
    }
</div>
@code {
    [Parameter] public PieceModel Model { get; set; }
    [CascadingParameter] PiecesContainer Container { get; set; }
    [Parameter] public EventCallback RefreshPreviousPosition { get; set; }
    public string testcolor { get; set; } = "yellow";
    private void HandleDragStart(PieceModel selectedJob)
    {        
        Container.Payload = this.Model.Id;
    }    

    private void HandleDragEnd()
    {
        testcolor = "red";
    }

    private async Task HandleClick()
    {
        testcolor = "red";
        await Container.VisualizeLegalMoves(Model);

    }

    private string colourClass(Colour colour)
    {
        return colour == Colour.Black
            ? "piece-black"
            : "piece-white";
    }

    private string fontawesomeClass(PieceClass piece)
    {
        switch (piece)
        {
            case PieceClass.King:
                return "fa-solid fa-chess-king";
            case PieceClass.Queen:
                return "fa-solid fa-chess-queen";
            case PieceClass.Bishop: 
                return "fa-solid fa-chess-bishop";
            case PieceClass.Knight:
                return "fa-solid fa-chess-knight";
            case PieceClass.Rook:
                return "fa-solid fa-chess-rook";
            case PieceClass.Pawn:
                return "fa-solid fa-chess-pawn";
            default:
                return "fa-regular fa-cow";
        }
    }
}
