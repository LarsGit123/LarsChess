@page "/"
@using BlazorApp1.Data;
@using BlazorApp1.Models;

<PageTitle>Sjakk</PageTitle>

<PiecesContainer Pieces = "Pieces" OnStatusUpdated="HandlePieceMoved">



        <BoardRow>
            @foreach (var pos in BoardPositions.Where(b => b.y == 0))
            {
                <Square Position="@pos" />
            }
        </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b.y == 1))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b.y == 2))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b.y == 3))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
            @foreach (var pos in BoardPositions.Where(b => b.y == 4))
            {
                <Square Position="@pos" />
            }
        </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b.y == 5))
        {
            <Square Position="@pos" />
        }
    </BoardRow>


    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b.y == 6))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
            @foreach (var pos in BoardPositions.Where(b => b.y == 7))
            {
                <Square Position="@pos" />
            }
        </BoardRow>


        
</PiecesContainer>

<strong>last move @lastMove</strong>


@code{
    string lastMove = "";
    List<(int x, int y)> BoardPositions = new List<(int x, int y)>();

    List<JobModel> Jobs = new List<JobModel>();
    List<PieceModel> Pieces = new List<PieceModel>();
    string lastUpdatedJob = "";

    private void Refresh()
    {
        StateHasChanged();        
    }

    protected override void OnInitialized()
    {


        for(int y=0; y<8; y++)
        {
            for(int x = 0; x<8; x++)
            {
                var pos = (x, y);

                if(Chessrules.StartingPositions.TryGetValue(pos, out var type))
                {
                    Pieces.Add(new PieceModel((pos.x, pos.y), Guid.NewGuid().ToString(), type.Item1, type.Item2));
                }
                BoardPositions.Add((x,y));
            }
        }
        Jobs.Add(
            new JobModel() {
                Id = 1,
                Description = "LarsJobDesc",
                LastUpdated = DateTime.Now,
                Status = JobStatuses.TODO
    });
    }

    void HandlePieceMoved(PieceModel model)
    {

        lastMove = $"{model.OrgPosition.x} {model.OrgPosition.y} -> {model.Position.x} {model.Position.y}";
        model.OrgPosition = model.Position;
    
    }

    void HandleStatusUpdated(JobModel updatedJob)
    {
        lastUpdatedJob = updatedJob.Description;
    }
}