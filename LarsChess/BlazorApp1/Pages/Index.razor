@page "/"
@using BlazorApp1.Models;

<PageTitle>Sjakk</PageTitle>

<PiecesContainer Pieces = "Pieces" OnStatusUpdated="HandlePieceMoved">



        <BoardRow>
            @foreach (var pos in BoardPositions.Where(b => b[0] == 0))
            {
                <Square Position="@pos" />
            }
        </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 1))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 2))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 3))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
            @foreach (var pos in BoardPositions.Where(b => b[0] == 4))
            {
                <Square Position="@pos" />
            }
        </BoardRow>

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 5))
        {
            <Square Position="@pos" />
        }
    </BoardRow>


    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 6))
        {
            <Square Position="@pos" />
        }
    </BoardRow>

    <BoardRow>
            @foreach (var pos in BoardPositions.Where(b => b[0] == 7))
            {
                <Square Position="@pos" />
            }
        </BoardRow>


        
</PiecesContainer>

<strong>last move @lastMove</strong>


@code{
    string lastMove = "";
    List<int[]> BoardPositions = new List<int[]>();

    List<JobModel> Jobs = new List<JobModel>();
    List<PieceModel> Pieces = new List<PieceModel>();
    string lastUpdatedJob = "";

    private void Refresh()
    {
        StateHasChanged();        
    }

    protected override void OnInitialized()
    {


        for(int i=0; i<8; i++)
        {
            Pieces.Add(new PieceModel(new[] { 1, i }, Guid.NewGuid().ToString(), PieceClass.Pawn));
            for(int j = 0; j<8; j++)
            {
                BoardPositions.Add(new[] { i, j });
            }
        }
        Jobs.Add(
            new JobModel() {
                Id = 1,
                Description = "LarsJobDesc",
                LastUpdated = DateTime.Now,
                Status = JobStatuses.TODO
    });
    }

    void HandlePieceMoved(PieceModel model)
    {

        lastMove = $"{model.OrgPosition[0]} {model.OrgPosition[1]} -> {model.Position[0]} {model.Position[1]}";
        model.OrgPosition[0] = model.Position[0];
        model.OrgPosition[1] = model.Position[1];
    }

    void HandleStatusUpdated(JobModel updatedJob)
    {
        lastUpdatedJob = updatedJob.Description;
    }
}