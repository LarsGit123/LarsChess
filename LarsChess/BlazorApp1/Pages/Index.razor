@page "/"
@using BlazorApp1.Models;

<PageTitle>Sjakk</PageTitle>

<PiecesContainer Pieces = "Pieces">
   
   

    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 0))
        {
            <Square Position="@pos" />
        }
    </BoardRow>
    
    <BoardRow>
        @foreach (var pos in BoardPositions.Where(b => b[0] == 1))
        {
            <Square Position="@pos" />
        }
    </BoardRow>
    
</PiecesContainer>

<ul>
    @foreach(var piece in Pieces)
    {
        <li>
            @piece.Position[0] @piece.Position[1]
        </li>
    }
</ul>


<button @onclick="Refresh">refresh</button>



<ul>
    <li draggable="true" @ondragstart="OnDragStart" style="background-color:blue;color:white;width:50px;height:50px;">drag me</li>
</ul>

<div dropzone="move" @ondrop="OnDrop" ondragover="event.preventDefault();" style="background-color:green;color:white;width:200px;height:200px;">
    and drop me here
</div>


<div>@DragState</div>




@code{

    public string DragState = "waiting...";

    public void OnDragStart(DragEventArgs dragEventArgs)
    {
        DragState = "drag started";
    }

    public void OnDrop(DragEventArgs dragEventArgs)
    {
        DragState = "item dropped";
    }





    List<int[]> BoardPositions = new List<int[]>();

    List<JobModel> Jobs = new List<JobModel>();
    List<PieceModel> Pieces = new List<PieceModel>();
    string lastUpdatedJob = "";

    private void Refresh()
    {
        StateHasChanged();        
    }

    protected override void OnInitialized()
    {


        for(int i=0; i<8; i++)
        {
            Pieces.Add(new PieceModel{ Class = PieceClass.Pawn, Position= new[]{1,i}, Id = Guid.NewGuid().ToString()} );
            for(int j = 0; j<8; j++)
            {
                BoardPositions.Add(new[] { i, j });
            }
        }
        Jobs.Add(
            new JobModel() {
                Id = 1,
                Description = "LarsJobDesc",
                LastUpdated = DateTime.Now,
                Status = JobStatuses.TODO
    });
    }

    void HandlePieceMoved(PieceModel model)
    {
        
    }

    void HandleStatusUpdated(JobModel updatedJob)
    {
        lastUpdatedJob = updatedJob.Description;
    }
}