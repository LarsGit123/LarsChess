@page "/"
@using BlazorApp1.Data;
@using BlazorApp1.Models;
@inject Chessrules rules;

<PageTitle>Sjakk</PageTitle>
 
<PiecesContainer Pieces = "Pieces" Squares="Squares" OnStatusUpdated="HandlePieceMoved" OnRefresh="Refresh" >

    @if (Xcoords != null)
    {
        <div class="boardrow">

            @foreach (var x in Xcoords)
            {
                <div class="square" style="height:1.5rem;">
                    <p>@x</p>
                </div>
            }
        </div>
    }

    <BoardRow RowNum="0">
        @foreach (var model in Squares.Where(b => b.Position.y == 0))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="1">
        @foreach (var model in Squares.Where(b => b.Position.y == 1))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="2">
        @foreach (var model in Squares.Where(b => b.Position.y == 2))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="3">
        @foreach (var model in Squares.Where(b => b.Position.y == 3))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="4">
        @foreach (var model in Squares.Where(b => b.Position.y == 4))
            {
                <Square Model="@model" />
            }
        </BoardRow>

    <BoardRow RowNum="5">
        @foreach (var model in Squares.Where(b => b.Position.y == 5))
        {
            <Square Model="@model" />
        }
    </BoardRow>


    <BoardRow RowNum="6">
        @foreach (var model in Squares.Where(b => b.Position.y == 6))
        {
            <Square Model="@model" />
        }
    </BoardRow>

    <BoardRow RowNum="7">
        @foreach (var model in Squares.Where(b => b.Position.y == 7))
            {
                <Square Model="@model" />
            }
        </BoardRow>
</PiecesContainer>

<strong>last move @lastMove</strong>


@code{
    string[] Xcoords = new[] {"A", "B", "C", "D", "E", "F", "G", "H" };
    string lastMove = "";
    //  List<(int x, int y)> BoardPositions = new List<(int x, int y)>();

    List<JobModel> Jobs = new List<JobModel>();
    List<SquareModel> Squares = new List<SquareModel>();
    List<PieceModel> Pieces = new List<PieceModel>();
    string lastUpdatedJob = "";

    private void Refresh()
    {
        StateHasChanged();        
    }

    protected override void OnInitialized()
    {


        for(int y=0; y<8; y++)
        {
            for(int x = 0; x<8; x++)
            {
                var pos = (x, y);

                if(rules.StartingPositions.TryGetValue(pos, out var type))
                {
                    Pieces.Add(new PieceModel((pos.x, pos.y), Guid.NewGuid().ToString(), type.Item1, type.Item2));
                }
                Squares.Add(new SquareModel((x, y)));
                //BoardPositions.Add((x,y));
            }
        }
        Jobs.Add(
            new JobModel() {
                Id = 1,
                Description = "LarsJobDesc",
                LastUpdated = DateTime.Now,
                Status = JobStatuses.TODO
    });
    }

    void HandlePieceMoved(PieceModel model)
    {
        if(model is null)
        {
            return;
        }
        lastMove = $"{model.OrgPosition.x} {model.OrgPosition.y} -> {model.Position.x} {model.Position.y}";
        model.OrgPosition = model.Position;
        StateHasChanged();
    }


    void HandleStatusUpdated(JobModel updatedJob)
    {
        lastUpdatedJob = updatedJob.Description;
    }
}