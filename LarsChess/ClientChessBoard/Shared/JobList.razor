@using ClientChessBoard.Models;
<div class="job-status">
    <h3>@ListStatus (@Jobs.Count())</h3>
    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">
        @foreach (var job in Jobs)
        {
            <Job JobModel="job" />
        }
    </ul>
</div>
@code {
    [CascadingParameter] JobContainer Container {
        get;
        set;
    }
    [Parameter] public JobStatuses ListStatus {
        get;
        set;
    }
    [Parameter] public JobStatuses[] AllowedStatuses {
        get;
        set;
    }
    List < JobModel > Jobs = new List <JobModel> ();
    string dropClass = "";
    protected override void OnParametersSet() {
        if(Jobs is null){ Jobs = new List<JobModel>(); }

        Jobs.Clear();

        if(Container is null)
        {
            Container = new JobContainer();
        }
        if(Container.Jobs is null)
        {
            Container.Jobs = new List<JobModel>();
        }
        Jobs.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }
    private void HandleDragEnter() {
        if (ListStatus == Container.Payload.Status) return;
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) {
            dropClass = "no-drop";
        } else {
            dropClass = "can-drop";
        }
    }
    private void HandleDragLeave() {
        dropClass = "";
    }
    private async Task HandleDrop() {
        dropClass = "";
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;
        await Container.UpdateJobAsync(ListStatus);
    }
}